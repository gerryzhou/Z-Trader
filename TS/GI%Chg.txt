{ Search Tag: %Chg with last Day close }

{TODO: find the time of peak/valley of the day;
Use weekly close as base;
simulation of stoploss?
}
using elsystem;
using elsystem.collections;
using tsdata.common;

inputs: 
	Price( Close ) [DisplayName = "Price", ToolTip = 
	 "Enter an EasyLanguage expression to use in the percentage change calculation."], 
	Length( 1 ) [DisplayName = "Length", ToolTip = 
	 "Enter number of bars over which to calculate percentage change."], 
	Hedging1( 1 ) [DisplayName = "Hedging1", ToolTip = 
	 "Enter 1 or -1 to identify the pair is hedging or not."], 
	Hedging2( 1 ) [DisplayName = "Hedging2", ToolTip = 
	 "Enter 1 or -1 to identify the pair is hedging or not."], 
	int DataNum (2) [ DisplayName = "DataNum",
		ToolTip = "The number of data series to trigger alert." ],
	PctChgMALen( 10 ) [DisplayName = "PctChgMALen", ToolTip = 
	 "Enter number of bars over which to calculate summization of PctChg."], 
	BarsAgoHiTH( 1 ) [DisplayName = "BarsAgoHiTH", ToolTip = 
	 "Enter number of bars over which to check Hi threshold for PctSpd."], 
	BarsAgoLoTH( 0 ) [DisplayName = "BarsAgoLoTH", ToolTip = 
	 "Enter number of bars over which to check Lo threshold for PctSpd."], 
	PctCapRatio1( 2.2 ) [DisplayName = "PctCapRatio1", ToolTip = 
	 "Enter ratio of Data1 capital vs Data2 capital for PctChg."], 
	PctCapRatio2( 2.2 ) [DisplayName = "PctCapRatio2", ToolTip = 
	 "Enter ratio of Data1 capital vs Data2 capital for PctChg."], 
	PntCapRatio1( 1 ) [DisplayName = "PntCapRatio1", ToolTip = 
	 "Enter ratio of Data1 capital vs Data2 capital for PntChg."], 
	PntCapRatio2( 1 ) [DisplayName = "PntCapRatio2", ToolTip = 
	 "Enter ratio of Data1 capital vs Data2 capital for PntChg."], 
	HedgeCapRatioAdj( 0 ) [DisplayName = "CapRatioAdj", ToolTip = 
	 "Enter adjusted ratio of CapRatio giving to Data1 VS Data2 bull wing."],
	HedgeCapRatioMax( 4 ) [DisplayName = "CapRatioMax", ToolTip = 
	 "Enter min CapRatio allowed"],
	HedgeCapRatioMin( 0.5 ) [DisplayName = "CapRatioMin", ToolTip = 
	 "Enter max CapRatio allowed."],
	KeyRevLengthPerH( 12 ) [DisplayName = "KeyRevLengthPerH", ToolTip = 
	 "Enter number of bars per hour over which to calculate key veversal HiLo for PctSpread."], 
	RateOfChgLen( 5 ) [DisplayName = "RateOfChgLen", ToolTip = 
	 "Enter number of bars to calculate rate of change by dollar amount."],
	RateOfChgAvgLen( 5 ) [DisplayName = "RateOfChgAvgLen", ToolTip = 
	 "Enter number to calculate the average rate of change by dollar amount."],
	ShareUnit( 10 ) [DisplayName = "ShareUnit", ToolTip = 
	 "Enter unit amount to calculate the share ratio."],
	TimeAlert( 1025 ) [DisplayName = "TimeAlert", ToolTip = 
	 "Time to alert."],
	PreMktOpen( true ) [DisplayName = "PreMarketOpen", ToolTip = 
	 "Display premarket open range."],
	HiQAlert( 7 ) [DisplayName = "HiQAlert", ToolTip = 
	 "Enter percentage amount above which an alert will be triggered.  Example:  10."],
	HiVAlert( 7 ) [DisplayName = "HiVAlert", ToolTip = 
	 "Enter percentage amount above which an alert will be triggered.  Example:  10."],
	HiBAlert( 5 ) [DisplayName = "HiBAlert", ToolTip = 
	 "Enter percentage amount above which an alert will be triggered.  Example:  10."],
	HiThreshold( 7 ) [DisplayName = "HiThreshold", ToolTip = 
	 "Enter percentage amount above which an alert will be triggered.  Example:  10."],
	HiPrcAlert( 9000 ) [DisplayName = "HiPriceAlert", ToolTip = 
	 "Enter price above which an alert will be triggered.  Example:  8925."],
	LoQAlert( -2 ) [DisplayName = "LoQAlert", ToolTip = 
	 "Enter percentage amount below which an alert will be triggered.  Example:  -10."],
	LoVAlert( -2 ) [DisplayName = "LoVAlert", ToolTip = 
	 "Enter percentage amount below which an alert will be triggered.  Example:  -10."],
	LoBAlert( -1 ) [DisplayName = "LoBAlert", ToolTip = 
	 "Enter percentage amount below which an alert will be triggered.  Example:  -10."],
	LoThreshold( -2 ) [DisplayName = "LoThreshold", ToolTip = 
	 "Enter percentage amount below which an alert will be triggered.  Example:  -10."],
	LoPrcAlert( 6000 ) [DisplayName = "LoPriceAlert", ToolTip = 
	 "Enter price below which an alert will be triggered.  Example: 6925."],
	PctBaseTimeframe (0) [ DisplayName = "PctBaseTimeframe",
		ToolTip = "The timeframe for %Chg base, 0=lastD Close, -1=lastD Open(rollover at 18:00), -2=lastW Close, 1=today open." ],
	PctBaseRollover (1800) [ DisplayName = "PctBaseRollover",
		ToolTip = "The time for %Chg base rollover when -1=lastD Open(rollover at 18:00)" ],
	CapRatioTimeStart( 300 ) [DisplayName = "CapRatioTimeStart", ToolTip = 
	 "Enter the start time HHMM to caculate the CapRatio."],
	CapRatioTimeEnd( 810 ) [DisplayName = "CapRatioTimeEnd", ToolTip = 
	 "Enter the end time HHMM to caculate the CapRatio."],
	PctSpdEntryTime( 415 ) [DisplayName = "PctSpdEntryTime", ToolTip = 
	 "Enter entry time HHMM to have the PctSpd."],
	PctSpdExitTime( 835 ) [DisplayName = "PctSpdExitTime", ToolTip = 
	 "Enter exit time HHMM to have the PctSpd."],
	Printout (false) [ DisplayName = "Printout",
		ToolTip = "Printout the console or not." ],
	UpQColor( Cyan ) [DisplayName = "UpQColor", ToolTip = 
	 "Enter plot color to use when percentage change is greater than HiAlert."], 
 	UpVColor( Magenta ) [DisplayName = "UpVColor", ToolTip = 
	 "Enter plot color to use when percentage change is greater than HiAlert."], 
	UpBColor( DarkGreen ) [DisplayName = "UpBColor", ToolTip = 
	 "Enter plot color to use when percentage change is greater than HiAlert."], 
	DnQColor( Cyan ) [DisplayName = "DnQColor", ToolTip = 
	 "Down Color.  Enter plot color to use when percentage change is less than LoAlert."],
	DnVColor( Magenta ) [DisplayName = "DnVColor", ToolTip = 
	 "Down Color.  Enter plot color to use when percentage change is less than LoAlert."],
	DnBColor( DarkGreen ) [DisplayName = "DnRColor", ToolTip = 
	 "Down Color.  Enter plot color to use when percentage change is less than LoAlert."] ;

variables:
	PctSpd( 0 ),
	AbsSpd( 0 ),
	HedgeCapRatio( 1 ),
	CurPctCapRatio1( PctCapRatio1 ),
	CurPntCapRatio1( PntCapRatio1 ),
	CurPctCapRatio2( PctCapRatio2 ),
	CurPntCapRatio2( PntCapRatio2 ),
	CapRatioMaLen( 20 ),
	ShareRatio( 0 ),
	PctChg1( 0 ),
	PntChg1( 0 ),
	PctChg2( 0 ),
	PntChg2( 0 ),
	PctChg11( 0 ),
	PctChg22( 0 ),
	RateOfChg1 (0),
	RateOfChgAvg1 ( 0 ),
	RateOfChg2 ( 0 ),
	RateOfChgAvg2 ( 0 ),
	RateOfChgRatio( 0 ),
	PrcData1( 0 ),
	PrcData2( 0 ),
	BaseData1( 0 ),
	BaseData2( 0),
	BaseData11( 0 ),
	BaseData22( 0),
	PrcDataN(DataNum),
	BarNoStr(""),
	KeyRevLowBar(-1),
	KeyRevHighBar(-1),
	oExtremeVal(0),
	oExtremeBar(0),
	UpColor(white),
	DnColor(white),
	HiAlert(0),
	LoAlert(0),
	string tagSpd("%Spd"),
	PnL(1),
	PctSpdEn(0),
	PctSpdEx(0),
	PctSpdGap(0),
	TotalBars(0),
	TotalLoTH(0),
	TotalHiTH(0),
	int Status(0),
	bool ReadCmd(false),
	int lineCount(0),
	Vector oCmdVector(NULL);
	//SymbolAttributesProvider SymbolProvider(NULL) ;

//Array: oCmdArray[]("");

{ Status: LowBand = 0, HiTH = 1, LoTH = -1 }
method int SetStatus(double spd)
variables:  int status;
begin
	Status = status;
	return status;
end;

{ Set capratio
}
method void SetRateOfChgRatio()
variables: int min, double d10, double d11, double d20, double d21;
begin
	if(CurrentBar > RateOfChgLen) then begin
		d10 = Close of Data1;
		d20 = Close of Data2;
		d11 = Close[RateOfChgLen] of Data1;
		d21 = Close[RateOfChgLen] of Data2;
		RateOfChg1 = Absvalue(d11 - d10);
		RateOfChg2 = Absvalue(d21 - d20);
		RateOfChgAvg1 = Average(RateOfChg1, RateOfChgAvgLen);
		RateOfChgAvg2 = Average(RateOfChg2, RateOfChgAvgLen);
		if RateOfChgAvg1 <> 0 and RateOfChgAvg2 <> 0 Then
			RateOfChgRatio = ShareUnit*RateOfChgAvg2/RateOfChgAvg1;
	end;
end;

{ Set hedge cap ratio}
method void SetHedgeCapRatio()
variables: int min, double sum1, double sum2;
begin
	if(bartype = 1) then begin //1=minute
		min = (TimeToMinutes(CapRatioTimeEnd) - TimeToMinutes(CapRatioTimeStart))/2;
		CapRatioMaLen = min/BarInterval;

		if(CapRatioMaLen > 0 and Currentbar > CapRatioMaLen) Then begin
			sum1 = Summation(PctChg1, PctChgMALen); //HighestFC
			sum2 = Summation(PctChg2, PctChgMALen);
		if(sum1 <> 0 and sum2 <> 0) Then
				HedgeCapRatio = Absvalue((PctChgMALen*HedgeCapRatioAdj - sum2)/sum1);
{			if(sum1 <> 0 and sum2 > 0) Then
				HedgeCapRatio = (PctChgMALen*CapRatioAdj - sum2)/sum1;
			else if (sum1 > 0) Then
				HedgeCapRatio = (PctChgMALen*CapRatioAdj - sum2)/sum1;}
			//CurCapRatio = 1/Absvalue(XAverage(PctSpd, CapRatioMaLen));
			if HedgeCapRatio > HedgeCapRatioMax Then
				HedgeCapRatio = HedgeCapRatioMax;
			if HedgeCapRatio < HedgeCapRatioMin Then
				HedgeCapRatio = HedgeCapRatioMin;
			if(sum1 <0) Then
				HedgeCapRatio = Neg(HedgeCapRatio);
		end;
	end;
end;

{ Set ShareRatio
Get share amount for data1 with 10 shares of data2
}
method double SetShareRatio()
variables: double prc1, double prc2;
begin
	prc1= close of Data1;
	prc2 = close of Data2;
	if prc1 > 0 and prc2 >0 Then
		ShareRatio = ShareUnit*prc2*CurPctCapRatio1/(prc1*CurPctCapRatio2);
	return ShareRatio;
end;

{ Set AbsSpd
set abs spread, normalized by points;
First: spread widen(exit) or narrowing(entry);
Second: who is dominated(follow its direction, use %Spd to figure out);
Third: up or down;
Forth: which be short, which be long(follow the main, slave as hedge);
}
method double SetAbsSpd(double prc1, double prc2, double base1, double base2)
variables: double bv1, double bv2;
begin
	if (Category = SecurityType.Future) Then
	Begin
		bv1 = Bigpointvalue of Data1;
		bv2 = Bigpointvalue of Data2;
		if bv2 <> 0 and bv1 <> 0 then begin
			if bv1 >= bv2 then
				AbsSpd = Hedging1*CurPntCapRatio1*PntChg1 + Hedging2*bv2*PntChg2/bv1
			else if bv1 < bv2 Then
				AbsSpd = Hedging1*CurPntCapRatio1*bv1*PntChg1/bv2 + Hedging2*PntChg2;
		end;
	end
	else //if (Category = SecurityType.Future) Then
	Begin
		bv1 = base1;
		bv2 = base2;
		if bv2 <> 0 and bv1 <> 0 then begin
			if bv1 >= bv2 then
				AbsSpd = Hedging1*CurPntCapRatio1*bv2*PntChg1/bv1 + Hedging2*PntChg2
			else if bv1 < bv2 Then
				AbsSpd = Hedging1*CurPntCapRatio1*PntChg1 + Hedging2*bv1*PntChg2/bv2;
		end;
	end;
	return AbsSpd;
end;

{ Set PctSpd
set percent spread
}
method double SetPctSpd(double pc1, double pc2)
begin
	PctSpd = Hedging1*CurPctCapRatio1*pc1 + Hedging2*CurPctCapRatio2*pc2;
	if not GF_IsIntradayBar Then Begin {Daily bar}
		PctSpdEn = PctSpd[1];
		PctSpdEx = PctSpd;
		if PctSpdEn <> 0 and PctSpdEx <> 0 then
			PctSpdGap = PctSpdEx - PctSpdEn;
		return PctSpd;
	End;
	{Intraday bar }
	if GF_FirstBarSession(PctSpdEntryTime, false) Then Begin
		PctSpdEn = PctSpd;
		Print(Numtostr(PctSpdEn, 2), "	", Numtostr(PctSpdEx, 2), "	", Numtostr(PctSpdGap, 2), "	",  Numtostr(PnL, 2), "	", string.Format("{0:MM/dd/yyyy HH:mm:ss}", BarDateTime[0]));
	End;
	if GF_FirstBarSession(PctSpdExitTime, false) Then Begin
		PctSpdEx = PctSpd;
		if PctSpdEn <> 0 and PctSpdEx <> 0 then
			PctSpdGap = PctSpdEx - PctSpdEn;
		Print(Numtostr(PctSpdEn, 2), "	", Numtostr(PctSpdEx, 2), "	", Numtostr(PctSpdGap, 2), "	",  Numtostr(PnL, 2), "	", string.Format("{0:MM/dd/yyyy HH:mm:ss}", BarDateTime[0]));
	End;
	return PctSpd;
end;

{ Set PntChg
set point change
}
method void SetPntChg(double prc1, double prc2, double base1, double base2)
variables: double bv1, double bv2;
begin
	PntChg1 = prc1 - base1;
	PntChg2 = prc2 - base2;
end;

{ Set base price for %Chg}
method double SetBasePrice()
variables:  double prc;
begin
	prc = Close;
	if GF_IsIntradayBar then begin { ie, if tick, second or minute bars }
		if IsBaseRolloverTime() or IsPreMktSession() then Begin
			BaseData1 = CloseSession(1, 0) of Data1;//OpenD(0) of Data1;
			BaseData2 = CloseSession(1, 0) of Data2;//OpenD(0) of Data2;
		End
		else Begin
			BaseData1 = CloseSession(1, Length) of Data1;//OpenD(0) of Data1;
			BaseData2 = CloseSession(1, Length) of Data2;//OpenD(0) of Data2;
		End;
	end
	else Begin {Daily or higher timeframe}
		BaseData1 = Close[Length] of Data1;
		BaseData2 = Close[Length] of Data2;
	end;
	//Print("[", Date[0], ",", Time[0], "] BaseData1=", Numtostr(BaseData1, 2), ", BaseData2=", Numtostr(BaseData2, 2));
	return prc;
end;

method double SetCurrentPrice()
variables:  double prc;
begin
	prc = Close;
	if GF_IsIntradayBar then begin { ie, if tick, second or minute bars }
		PrcData1 = Close of Data1;
		PrcData2 = Close of Data2;		
	End
	else Begin {Daily or higher timeframe}
		PrcData1 = Open of Data1;
		PrcData2 = Open of Data2;
	end;
	return prc;
end;

{ Status: LowBand = 0, HiTH = 1, LoTH = -1
}
method bool CheckHiThreshold(int barsAgo)
variables:  bool status, int i;
begin
	status = false;
	for i=0 to barsAgo Begin
		if(PctSpd[i] > HiThreshold) Then
			status = true;
	end;
	return status;
end;

{ Status: LowBand = 0, HiTH = 1, LoTH = -1
}
method bool CheckLoThreshold(int barsAgo)
variables:  bool status, int i;
begin
	status = false;
	for i=0 to barsAgo Begin
		if(PctSpd[i] <= LoThreshold) Then
			status = true;
	end;
	return status;
end;

{
Get the spread key revesal low/high or the latest bars
}
method int GetPctSpdKeyRevBar()
begin
	if time >= 700 and time[1] < 700 then begin
	if 1 = Extremes(PctSpd, 4*KeyRevLengthPerH, 1, oExtremeVal, oExtremeBar) Then
		KeyRevHighBar = oExtremeBar;
	if 1 = Extremes(PctSpd, 4*KeyRevLengthPerH, -1, oExtremeVal, oExtremeBar) Then
		KeyRevLowBar = oExtremeBar;
	End;
	if time >= 830 and time[1] < 830 then begin
	if 1 = Extremes(PctSpd, 1.5*KeyRevLengthPerH, 1, oExtremeVal, oExtremeBar) Then
		KeyRevHighBar = oExtremeBar;
	if 1 = Extremes(PctSpd, 1.5*KeyRevLengthPerH, -1, oExtremeVal, oExtremeBar) Then
		KeyRevLowBar = oExtremeBar;
	End;
	if time >= 1130 and time[1] < 1130 then begin
	if 1 = Extremes(PctSpd, 3*KeyRevLengthPerH, 1, oExtremeVal, oExtremeBar) Then
		KeyRevHighBar = oExtremeBar;
	if 1 = Extremes(PctSpd, 3*KeyRevLengthPerH, -1, oExtremeVal, oExtremeBar) Then
		KeyRevLowBar = oExtremeBar;
	End;
	if time >= 1500 and time[1] < 1500 then begin
	if 1 = Extremes(PctSpd, 3.5*KeyRevLengthPerH, 1, oExtremeVal, oExtremeBar) Then
		KeyRevHighBar = oExtremeBar;
	if 1 = Extremes(PctSpd, 3.5*KeyRevLengthPerH, -1, oExtremeVal, oExtremeBar) Then
		KeyRevLowBar = oExtremeBar;
	End;
	return -1;
end;

method void SetPctSpdColor()
begin
	if((PctChg1 * PctChg2) > 0) Then begin //Both are the same direction, both up or both dn, it's balanced;
		UpColor = UpBColor;
		DnColor = DnBColor;
		HiAlert = HiBAlert;
		LoAlert = LoBAlert;
		//Print(Currentbar, "-Convergence: PctChg1, PctChg1=", PctChg1, ",", PctChg2, "  DT=", string.Format("{0:MM/dd/yyyy HH:mm:ss}", BarDateTime[0]));
		//Print("Currentbar=", Currentbar, ", PctSpd=", PctSpd, ", Symbol=", Symbol );
		//PctSpd = 0;
	end
	else if(PctChg1 > 0) then Begin
			UpColor = UpQColor;
			DnColor = DnQColor;
			HiAlert = HiQAlert;
			LoAlert = LoQAlert;
	End
	else if(PctChg2 > 0) then Begin
			UpColor = UpVColor;
			DnColor = DnVColor;
			HiAlert = HiVAlert;
			LoAlert = LoVAlert;
	end;
end;

{Check PnL by spd gap}
method int CheckPnL()
begin
	if(currentbar > Maxbarsback) then begin //CheckLoThreshold(BarsAgoLoTH) <> true and CheckHiThreshold(BarsAgoHiTH) <> true) then //PctSpd > LoThreshold
		//if(NewDaySession() or ( bartype = 2 and CheckLoThreshold(BarsAgoLoTH) <> true and CheckHiThreshold(BarsAgoHiTH) <> true)) then begin
		if PctSpdGap <> 0 and ( not GF_IsIntradayBar or GF_FirstBarSession(PctSpdExitTime, false)) Then Begin
			//PctSpdGap = PctSpd - PctSpd[1];
			PnL = PnL[1]*(1 + PctSpdGap/100);
			//Print(Numtostr(PctSpd, 2), ", ", Numtostr(PnL, 2), ",", string.Format("{0:MM/dd/yyyy HH:mm:ss}", BarDateTime[0]));
			Print(Numtostr(PctSpdEn, 2), "	", Numtostr(PctSpdEx, 2), "	", Numtostr(PctSpdGap, 2), "	",  Numtostr(PnL, 2), "	", string.Format("{0:MM/dd/yyyy HH:mm:ss}", BarDateTime[0]));
			return 1;
		end;
	end;
	return -1;
End;

{ 

method bool CheckSessionOpen()
variables:  bool status;
begin
	status = false;
	//if(Bartype = 2 or Dayofmonth(Date[0]) <> Dayofmonth(Date[1])) then
	if(Bartype = 2 or GF_FirstBarDay(0)) then
		status = true;
	return status;
end;
}

method bool NewDaySession()
Variables: bool isTime;
Begin
	isTime = False;
	if GF_IsIntradayBar then begin  //ie, if tick, second or minute bars 
		if (Category = SecurityType.Stock and GF_FirstBarDay(0)) then
			isTime = true;
		if (Category = SecurityType.Future and GF_FirstBarSession(Sessionstarttime(0, 3), false)) Then Begin
			isTime = true;		
		end;
	end;
	return isTime;
End;

method bool IsRegularSession()
Variables: bool isTime;
Begin
	isTime = False;
	if GF_IsIntradayBar then begin  //ie, if tick, second or minute bars 
		if (Category = SecurityType.Stock and time <= 1500 and time >= 830) then
			isTime = true;
		if (Category = SecurityType.Future and time <= 1500 and time >= 830) Then Begin
			isTime = true;
		end;
	end;
	return isTime;
End;

method bool IsPostMktSession()
Variables: bool isTime;
Begin
	isTime = False;
	if GF_IsIntradayBar then begin  //ie, if tick, second or minute bars 
		if (Category = SecurityType.Stock and time <= 1900 and time > 1500) then
			isTime = true;
		if (Category = SecurityType.Future and 
		((time <= 2359 and time > 1500) or (time < 400 and time >= 0))) Then Begin
			isTime = true;
		end;
	end;
	return isTime;
End;

method bool IsPreMktSession()
Variables: bool isTime;
Begin
	isTime = False;
	if GF_IsIntradayBar then begin  //ie, if tick, second or minute bars 
		if (Category = SecurityType.Stock and time <= SessionStartTime(1,1) and time >= SessionStartTime(0,3)) then
			isTime = true;
		if (Category = SecurityType.Future and time <= SessionStartTime(1,1) and time >= 400) Then Begin
			isTime = true;
		end;
	end;
	return isTime;
End;
//Array_setmaxindex(oCmdArray, 1048576);

method bool IsBaseRolloverTime()
Variables: bool isTime;
Begin
	isTime = False;
	if GF_IsIntradayBar then begin  //ie, if tick, second or minute bars 
		if (Category = SecurityType.Stock and time >= PctBaseRollover) then
			isTime = true;
		if (Category = SecurityType.Future and time >= PctBaseRollover) Then Begin
			isTime = true;
		end;
	end;
	return isTime;
End;

if Currentbar = 1 then once Begin
	oCmdVector = Vector.Create();
	if Category = SecurityType.Future then
		tagSpd = "%Spd";
	//Print("SymbolProvider=", SymbolProvider.SymbolType.ToString(), "Maxbarsback=", Maxbarsback);
end;

{Print(
BarDateTime.ELDate:4:0, " ",
BarDateTime.ELDateTimeEx, " ",
BarDateTime.ELTime:4:0, " ",
BarDateTime.Hour:4:0, " ",
BarDateTime.Minute:4:0, " ",
BarDateTime.Second:4:0, " " ) ;}

if Currentbar < 2 or LastBarOnChart then Begin
	//ReadCmd = GF_LoadFile("c:/www/cmd/ztrader_cmd_ts.json", oCmdVector);
{	for lineCount = 0 to Array_GetMaxIndex(oCmdArray) Begin
		Print("R-", oCmdArray[lineCount]);
	end;}
	for lineCount = 0 to oCmdVector.Count-1 Begin
		//Print("R-", oCmdVector[lineCount].ToString());
	end;
end;


PrcData1 = Close of Data1;
PrcData2 = Close of Data2;
PrcdataN = Close of Data(DataNum);

SetBasePrice();
SetCurrentPrice();

{BaseData1 = CloseD(Length) of Data1;
BaseData2 = CloseD(Length) of Data2;
}
if(BaseData1 > 0 and BaseData2 > 0) then
	begin
		PctChg1 = GF_PercentChg( PrcData1, BaseData1 ) ;
		PctChg2 = GF_PercentChg( PrcData2, BaseData2 ) ;
		SetPctSpd(PctChg1, PctChg2);//PctSpd = CurCapRatio*PctChg1 + PctChg2;
		SetPntChg(PrcData1, PrcData2, BaseData1, BaseData2);
		SetAbsSpd(PrcData1, PrcData2, BaseData1, BaseData2);
		if (GF_IsIntradayBar and BaseData1 <> 0 and BaseData2 <> 0) then Begin
			PctChg11 = GF_PercentChg( PrcData1, BaseData11 ) ;
			PctChg22 = GF_PercentChg( PrcData2, BaseData22 ) ;
			//PctSpd1 = CurCapRatio*PctChg11 + PctChg22;
		end;
		SetPctSpdColor();
		{if (PctChg1 <> 0) Then
			PctRatio = Absvalue(PctChg2/PctChg1);}
		CheckPnL();
{				Print(String.Format("{0} 	{1}		{2:MM/dd/yyyy} 	{3} 	{4}		{5}		{6}		{7}		{8}",
					Numtostr(PctSpd, 2), Numtostr(PnL, 2), BarDateTime[0], Numtostr(PctChg1, 2), Numtostr(PrcData1, 2), Numtostr(BaseData1, 2),
					 Numtostr(PctChg2, 2), Numtostr(CapRatio, 2), Numtostr(CurCapRatio, 2)));}
		// Print("PctSpd, PnL=", Numtostr(PctSpd[1], 2), ", ", Numtostr(PnL[1], 2), "  DT=", string.Format("{0:MM/dd/yyyy HH:mm:ss}", BarDateTime[1]));
	end;
BarNoStr = "%Chg" + Numtostr(BarNumber, 0) + "," + Numtostr(PctChg1, 0) + "," + Numtostr(PctChg2, 0);

SetRateOfChgRatio();
SetHedgeCapRatio();
SetShareRatio();

//if category = SecurityType.Future then
	Plot1( AbsSpd, !("AbsSpd") );
//Else
	Plot2( PctSpd, !("%Spd") );
{ color criteria }
if PctSpd > HiAlert then 
	SetPlotColor( 2, UpColor ) 
else if PctSpd < LoAlert then 
	SetPlotColor( 2, DnColor ) ;
	
Plot3( HedgeCapRatioAdj, !("MeanRevLine") ) ;
Plot4( CurPctCapRatio1, !( "CurPctCapRatio1" ) ) ;
Plot5( ShareRatio, !( "ShareRatio" ) ) ;
SetPlotColor( 4, White ) ;
SetPlotColor( 5, Magenta ) ;

if Currentbar > Maxbarsback then //NewDaySession() then
Begin
	//Print("HedgeCapRatio=", Numtostr(HedgeCapRatio, 2));
	Plot6( HedgeCapRatio, !( "HedgeCapRatio" ) ) ;
	SetPlotColor( 6, Yellow ) ;
end
else
	NoPlot(6);

{if category = SecurityType.Future then
begin}
Plot7( PntChg1, !( "PntChg1" ) ) ;
Plot8( PntChg2, !( "PntChg2" ) ) ;
SetPlotColor( 7, DarkGray ) ;
SetPlotColor( 8, DarkGray ) ;
{End
else
Begin}
Plot9( PctChg1, !( "%Chg1" ) ) ;
Plot10( PctChg2, !( "%Chg2" ) ) ;
SetPlotColor( 9, DarkGray ) ;
SetPlotColor( 10, DarkGray ) ;
{end;}

if Currentbar > RateOfChgLen then Begin
	Plot11( RateOfChgRatio, !( "RateOfChgRatio" ) ) ;
	Plot12( RateOfChgAvg1, !( "RateOfChgAvg1" ) ) ;
	Plot13( RateOfChgAvg2, !( "RateOfChgAvg2" ) ) ;
	SetPlotColor( 11, Yellow ) ;
	SetPlotColor( 12, DarkGray ) ;
	SetPlotColor( 13, DarkGray ) ;
end;

if Printout then
Print("CurCapRatio1, HedgeCapRatio = (", Numtostr(CurPctCapRatio1, 3), ", ", Numtostr(HedgeCapRatio, 2), "), ", 
"ShareRatio = ",  Numtostr(ShareRatio, 1));


if Currentbar > KeyRevLengthPerH then
Begin
	GetPctSpdKeyRevBar();
	if KeyRevHighBar > 0 then begin
		SetPlotColor[KeyRevHighBar]( 1, Yellow ) ;
		KeyRevHighBar = -1;
	end;
	if KeyRevLowBar > 0 then begin
		SetPlotColor[KeyRevLowBar]( 1, Blue ) ;
		KeyRevLowBar = -1;
	end;
end;

{
if PctRatio > HiAlert then 
	SetPlotColor( 3, UpRColor ) 
else if PctRatio < LoAlert then 
	SetPlotColor( 3, DnRColor ) ;
}
{ alert criteria }
if AlertEnabled then
	begin
		if PctSpd crosses over HiAlert then
			Alert( !( "Bullish alert: " + Numtostr(HiAlert,2) ) )
		else if PctSpd crosses under LoAlert then
			Alert( !( "Bearish alert: "+  Numtostr(LoAlert,2) ) ) ;
			
		if Time >= TimeAlert and Time[1] < TimeAlert then
			Alert( !( "Timeout alert: " + Numtostr(TimeAlert,0) ) );

		if PrcDataN crosses over HiPrcAlert then
			Alert( !( Symbol of Data(DataNum) + "- Price UP alert: " + Numtostr(HiPrcAlert,2) ) )
		else if PrcDataN crosses under LoPrcAlert then
			Alert( !( Symbol of Data(DataNum) + "- Price DOWN alert: " + Numtostr(LoPrcAlert,2) ) ) ;
		
	end ;

if(PctSpd > HiThreshold) Then
	TotalHiTH += 1;
if(PctSpd <= LoThreshold) Then
	TotalLoTH += 1;

if LastBarOnChart then Begin
	TotalBars = Currentbar;
	//Print("TotalBars, %LoTH, %HiTH = ", TotalBars, ",  ", Numtostr(100*TotalLoTH/TotalBars, 2), "%,  ", Numtostr(100*TotalHiTH/TotalBars, 2), "%");
	if Printout then begin 
		//CurPctCapRatio = PctCapRatio;
		Print("Category=", Category, ",  SecurityType.Future=", SecurityType.Future, ",  Stock=", SecurityType.Stock);
		Print("SessionStartTime auto=", SessionStartTime(0,1), ",", SessionStartTime(0,2), ",", SessionStartTime(0,3));
		Print("SessionStartTime reg=", SessionStartTime(1,1), ",", SessionStartTime(1,2), ",", SessionStartTime(1,3));
		Print("SessionEndTime auto=", SessionEndTime(0,1), ",", SessionEndTime(0,2), ",", SessionEndTime(0,3));
		Print("SessionEndTime reg=", SessionEndTime(1,1), ",", SessionEndTime(1,2), ",", SessionEndTime(1,3));
	end;
end;

{ ** Copyright © TradeStation Technologies, Inc.  All Rights Reserved ** 
  ** TradeStation reserves the right to modify or overwrite this analysis technique 
     with each release. ** }