{ Helpful instructions on the use of EasyLanguage, such as this, appear below and are 
  contained within French curly braces {}.  There is no need to erase these 
  instructions when using EasyLanguage in order for it to function properly, because 
  this text will be ignored. }

{ This template includes some specialized functions.  Functions perform a specific 
  task, are written in EasyLanguage, and can be "called" from other analysis 
  techniques, signals/strategies, or functions.  }

{ Leave the following as is.  The AB_NextLabel function call returns a new label to use  
  for the cells corresponding to each new bar of the hidden activity data stream.  
  CellGroupLabel and MinuteInterval are variables, temporary holding places for data, 
  which are "declared" and "initialized" via the VARIABLES statement.  CellGroupLabel 
  (a string variable) is initialized to an arbitrary value in the declaration because 
  this will be replaced by the return of the label function.  MinuteInterval is 
  initialized to the bar interval of the hidden activity data stream, and this value is 
  then used as is in the label function call. }

variables: 
	CellGroupLabel( "" ), 
	MinuteInterval( BarInterval of ActivityData ) ;

CellGroupLabel = AB_NextLabel( MinuteInterval ) of ActivityData ;

{ The AB_SetRowHeight statement establishes the common height of the rows of cells that 
  will be added to the current bar of the chart.  The height can be set to a constant 
  value such as 1/8, or, as in this case, the AB_RowHeightCalc function can be used to 
  calculate the "ideal" row height to use for each new bar. }

AB_SetRowHeight( AB_RowHeightCalc( 10, 3 ) ) ;

{ STEP 1 OF 1: Replace <RIGHTCRITERIA> and <LEFTCRITERIA> with your triggering criteria  
  such as Close of ActivityData > Open of ActivityData and Close of ActivityData < Open 
  of ActivityData, respectively.  If either criteria is met, the AB_AddCellRange 
  function will add a range of cells corresponding to the current bar of the hidden 
  activity data stream.  These cells will be added to the right of the ActivityBar in 
  Cyan if the RIGHTCRITERIA was met, and to the left of the ActivityBar in Red if the 
  LEFTCRITERIA was met.  Note that Value1 is a pre-declared numeric variable that will 
  receive the error codes returned by the AB_AddCellRange function; the error codes are 
  not used. }

Condition1 = <RIGHTCRITERIA> ;
Condition2 = <LEFTCRITERIA> ;

if Condition1 then 
	Value1 = AB_AddCellRange( High of ActivityData, Low of ActivityData, RightSide, 
	 CellGroupLabel, Cyan, 0 ) ;
if Condition2 then 
	Value1 = AB_AddCellRange( High of ActivityData, Low of ActivityData, LeftSide, 
	 CellGroupLabel, Red, 0 ) ;
